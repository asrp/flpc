
is_prime <- fun[n]:
  i = 2
  # Could stop at square root
  cond = i < n
  repeat_if:
    drop1()
    if mod(n i) == 0:
      return(False)
    i = `i + 1
    cond = i < n
  return(True)

next_prime <- fun[n]:
  repeat:
    if is_prime(n):
      return(`n)
    n = `n + 1

hashtable <- class[]:
  instance <- fun[length self]:
    plength = next_prime(length)
    keys = boot_array.instance(plength boot_array_class)
    values = boot_array.instance(plength boot_array_class)
    new_obj = minobj.instance(boot_obj)
    memory.set(new_obj - 2 self)
    memory.set(new_obj plength)
    memory.append(keys)
    memory.append(values)
    memory.append(names.get("]"))
    return(new_obj)

  get <- fun[key self]:
    start = mod(hash(key) memory.get(self))
    index = boot_array.hash_index(key start memory.get(self + 1))
    return_if(index == None() None())
    return(boot_array.get(index memory.get(self + 2)))

  set <- fun[key value self]:
    start = mod(hash(key) memory.get(self))
    if memory.get(self) < start:
      error("Index too big")
    if memory.get(self) == start:
      error("Index still too big")
    if start < 0:
      error("Negative index")
    # An index out of range error here probably means a hash table ran out of space.
    l = boot_array.hash_index(key start memory.get(self + 1))
    if l == None():
      drop1()
      l = boot_array.none_index(start memory.get(self + 1))
    #print("Setting index ")
    #tprint(l)
    #printeol()
    boot_array.set(l key memory.get(self + 1))
    boot_array.set(l value memory.get(self + 2))
    # Should remove to speed up
    if not(boot_array.hash_index(key start memory.get(self + 1)) == l):
      error("Error reading new key")
    # memory.set(self memory.get(self) + 1)

  print <- fun[self]:
    print("{ ")
    l = memory.get(self)
    keys = memory.get(self + 1)
    values = memory.get(self + 2)
    i = l
    repeat_if:
      key = boot_array.get(l - i keys)
      if (key > 0):
        tprint(key)
        print(": ")
        print(boot_array.get(l - i values))
        print(", ")
      drop1()
      i = `i - 1
    print("}")
    # printeol()

  num_elems <- fun[self]:
    keys = memory.get(self + 1)
    count = 0
    i = memory.get(self)
    repeat_if:
      i = `i - 1
      key = boot_array.get(i keys)
      if (`key > 0):
        i count = s21()
        count = `count + 1
        count i = s21()
    return(count)

  attrib <- fun[name receiver searcher]:
    if lookup_print:
      print("Dict looking up ")
      print(name)
      printeol()
    return_if(string_equal(name "get")      hashtable.get)
    return_if(string_equal(name "set")      hashtable.set)
    return_if(string_equal(name "instance") hashtable.instance)
    return_if(string_equal(name "print")    hashtable.print)
    return_if(string_equal(name "len")      memory.get(receiver))
    return_if(string_equal(name "keys")     memory.get(receiver + 1))
    return_if(string_equal(name "values")   memory.get(receiver + 2))
    return_if(string_equal(name "type")     "hashtable")
    return(instance_attrib(name receiver searcher))

hashtable_class <- boot_obj . subclass(hashtable.attrib)
hashtable <- closure(hashtable_class . instance hashtable_class)
