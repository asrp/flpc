
# Nothing else from the compiled file will run if we run this!
# So it has to be the last thing in the compiled file.
# What's a good way to do nesting? Or should we go the
# continuation passing route?
# Also need to exit the function that called run.
compile_temp <- fun[filename temp_filename]:
  init_g(temp_filename)
  g . set("autogen_name" "tempgen")
  set_output(g . get("pos_file"))
  print(str_cat(Done "\n" temp_filename "1 "))
  set_output(None())
  compile_file(filename)
  file.close(g . get("file"))
  file.close(g . get("pos_file"))

run_file <- fast_fun[filename]:
  current_input_file()
  switch_input_file() # filename
  continue_from_file() # implicitly means continue from previous file

run_temp <- fun[filename temp_filename]:
  compile_temp(filename temp_filename)
  run_file(temp_filename)

run <- fun[filename]:
  compile_temp(`filename "gen/temp.f")
  run_file("gen/temp.f")

outf <- 1 # Dummy value

write_file <- fun[str filename]:
  file.open_at("w" filename outf)
  set_output(outf)
  print("# Generated")
  printeol()
  printraw(str)
  printeol()
  set_output(None())
  file.close(outf)

append_file <- fun[str filename]:
  file.open_at("a" filename outf)
  set_output(outf)
  printraw(str)
  printeol()
  set_output(None())
  file.close(outf)

eval_one <- fun[]:
  print(">> ")
  source = stdin.next_line()
  write_file(source "gen/eval.flpc")
  run("gen/eval.flpc")

eval_repl <- fun[]:
  repeat:
    print(">> ")
    source = stdin.next_line()
    if source == None() || string_equal(source "q"):
      return()
    write_file(`source "gen/eval.flpc")
    run("gen/eval.flpc")

debug_separator <- "debug_separator" # resizable(0)

print_until_sep <- fast_fun[]:
  cond = not(pick1() == debug_separator)
  repeat_if:
    drop1(`cond)
    tprint()
    printeol()
    cond = not(pick1() == debug_separator)
  drop1() # debug_separator

debug_g <- hashtable(20)

help <- fun[func]:
  # Prints the source of the function
  # For example help(help) or help(for_in)
  if is_basic(func):
    print(func)
  else:
    if str_endswith("instance creator" get_mem_hint(func)):
      # Todo get the . attr once all this string stuff is fixed.
      class_name = get_class_name(func)
      print(class_name)
      print(" with keys\n")
      tprint(names2() . get(class_name) . attr)
      printeol()
      print("Type help(")
      print(class_name)
      print(" . method) to get help on specific methods of this class.")
    else:
      print_frame(True 3 func)
  printeol()

look <- fun[]:
  print_frame(False debug_g . get("context") call_stack.len() - (debug_g . get("height")))

run_and_print <- fast_fun[filename]:
  current_input_file()
  debug_separator
  s21()
  switch_input_file()
  # Problem: When we assign values, we don't want them to be cleared
  # I guess no local vars then? Or have some syntax for "keep"
  print("-----")
  printeol()
  # debugger()
  print_until_sep()
  continue_from_file()

debuggerv2 <- fast_fun[]:
  debug_g . set("height" 8)
  debug_g . set("context" 2)
  debug_g . set("multiline" False)
  repeat:
    print(">> ")
    source = stdin.next_line()
    if source == None() || string_equal(source "q"):
      # Returns too much because this is a fast_fun
      # Could turn the repeat into a repeat_if, but ugly.
      # Need another kind of function that adds func sep but not data sep?
      run(names2() . get("dv2loop_file"))
      # return()
    elif string_equal(source "u"):
      drop1()
      debug_g . set("height" debug_g . get("height") + 1)
      look()
    elif string_equal(source "d"):
      drop1()
      debug_g . set("height" debug_g . get("height") - 1)
      look()
    elif string_equal(source "l"):
      drop1()
      debug_g . set("context" debug_g . get("context") + 1)
      look()
    elif string_equal(source "L"):
      drop1()
      debug_g . set("context" debug_g . get("context") - 1)
      look()
    elif string_equal(source "m"):
      debug_g . set("multiline" not(debug_g . get("multiline")))
      write_file("#Empty" "gen/eval.flpc")
    elif string_equal(source "f"):
      run_and_print("gen/temprun.f")
    elif debug_g . get("multiline"):
      if string_equal(source "r"):
        debug_separator
        compile_temp("gen/eval.flpc" "gen/temp.f")
        run_and_print("gen/temp.f")
        debug_g . set("multiline" not(debug_g . get("multiline")))
      else:
        append_file(source "gen/eval.flpc")
    elif str_len(source) == 0:
      # Empty line, do nothing
      drop1()
    elif True:
      # Need an exec and var assign
      # Could just use files/run for now.
      write_file(`source "gen/eval.flpc")
      compile_temp("gen/eval.flpc" "gen/temp.f")
      run_and_print("gen/temp.f")

error_handler_set(debuggerv2)

grammar_eval_file <- fun[filename]:
  bootg . set(0 "flpcg")
  write_parsed_funcs(bootg filename "gen/grammar_temp.flpc")
  run("gen/grammar_temp.flpc")

grammar_eval_file_with_out <- fun[filename output_prefix]:
  bootg . set(0 "flpcg")
  write_parsed_funcs(bootg filename str_cat(Done ".flpc" output_prefix))
  run_temp(str_cat(Done ".flpc" output_prefix) str_cat(Done ".f" output_prefix))

add_getter_syntax <- fun[]:
  g . set("autogen_name" "getter_gen")
  grammar_eval_file_with_out("grammar/getter.grammar" "gen/getter_syntax")

get <- fun[obj index]:
  return(obj . get(index))

names2() . set("!" get)

to_forth_conv.TRIPLE_QUOTE <- fun[root]:
  return(changed_class(FList_class make_resizable(Done
                                                  forthep("FCall" "'''" root . pos)
                                                  forthep("FStr" root . get(0) root . pos)
                                                  forthep("FCall" "'''" root . pos) )))

add_triple_quote <- fun[]:
  g . set("autogen_name" "triple_quote_gen")
  grammar_eval_file_with_out("grammar/triple_quote.grammar" "gen/triple_quote")
  to_forth_conv_hash . set("TRIPLE_QUOTE" to_forth_conv.TRIPLE_QUOTE)

to_forth_conv.make_resizable <- fun[root]:
  output = make_resizable(Done forthep("FStr" "Done" root . pos)
                               forthep("FCall" "pick:" root . pos))
  extend(list_comp([to_forth(elem)] root) output)
  output = flatten(`output FList_class)
  output . append(forthep("FCall" root . name root . pos))
  return(changed_class(FList_class output))

add_resizable_syntax <- fun[]:
  g . set("autogen_name" "resizable_syntax_gen")
  grammar_eval_file_with_out("grammar/resizable.grammar" "gen/resizable_syntax")
  to_forth_conv_hash . set("make_resizable" to_forth_conv.make_resizable)

add_list_comp_syntax <- fun[]:
  g . set("autogen_name" "list_comp_syntax_gen")
  grammar_eval_file_with_out("grammar/list_comp.grammar" "gen/list_comp_syntax")
  to_forth_conv_hash . set("list_comp_var" to_forth_conv.list_comp_var)

to_forth_conv.list_comp_var <- fun[root]:
  #output = list_comp([to_forth(elem)] root)
  output = make_resizable(Done
                          to_forth(root . get(2))
                          forthep("FStr" root . get(1) . get(0) root . get(1) . pos)
                          forthep("FCall" "push:" root . get(1) . pos)
                          FQuotep(" " to_forth(root . get(0)) root . get(1) . pos) )
  output = flatten(`output FList_class)
  output . append(forthep("FCall" root . name root . pos))
  return(changed_class(FList_class output))

# Assumes index and end are in scope and point to the right things.
# Now replaced by opt.incr
simple_for_incr <- fast_fun[]:
  index = `index + 1
  index < end

to_forth_conv.opt_simple_for <- fun[root]:
  # end start block
  output = make_resizable_rev(Done
                          to_forth(root . get(0))
                          forthep("FCall" "assign:") forthep("FStr" "end" root . get(0) . pos)
                          to_forth(root . get(1))
                          forthep("FCall" "assign:") forthep("FStr" "index" root . get(1) . pos)
                          to_forth(root . get(2)) forthep("FCall" "call" root . get(2) . pos)
                          forthep("FCall" "opt.incr" root . pos)
                          forthep("FCall" "repeat5_if" root . pos)
                          )
  output . print()
  output = flatten(`output FList_class)
  return(changed_class(FList_class output))

to_forth_conv.opt_for_in <- fun[root]:
  # end start block
  output = make_resizable_rev(Done
                          to_forth(root . get(0)) forthe("FCall" "attr_call:") forthe("FStr" "len")
                          forthe("FCall" "assign:") forthe("FStr" "end")
                          forthe("FCall" "0") forthe("FCall" "assign:") forthe("FStr" "index")
                          forthe("FCall" "pick:") forthe("FStr" "index")
                          forthe("FCall" "pick:") forthe("FStr" "iterable")
                          forthe("FCall" "attr_call:") forthe("FStr" "get")
                          forthe("FCall" "assign:") forthe("FStr" "elem")
                          to_forth(root . get(1)) forthe("FCall" "call")
                          forthe("FCall" "opt.incr")
                          forthe("FCall" "repeat5_if")
                          )
  output = flatten(`output FList_class)
  return(changed_class(FList_class output))

# String format
to_forth_conv.fmt <- fun[root]:
  output = make_resizable(Done forthep("FStr" "Done" root . pos) forthep("FCall" "pick:" root . pos))
  extend(list_comp([to_forth(elem)] root) output)
  output = flatten(`output FList_class)
  output . append(forthep("FCall" "str_cat3" root . pos))
  return(changed_class(FList_class output))

add_f_string_syntax <- fun[]:
  g . set("autogen_name" "f_string_gen")
  grammar_eval_file_with_out("grammar/f_string.grammar" "gen/f_string")

getter <- fun[obj index]:
  return(obj . get(index))

to_forth_conv.assign_op <- fun[root]:
  # names operator expressions
  names = root . get(0)
  if not(names . len == 1):
    error("Augmented assignment cannot have more than one target name.")
  output = make_resizable_rev(Done forthep("FCall" "pick:" names . pos)
                                   to_forth(names . get(0))
                                   to_forth(root . get(2))
                                   forthep("FCall" root . get(1) . get(0) root . get(1) . pos)
                                   forthep("FCall" "assign:" names . pos)
                                   to_forth(names . get(0)))
  return(changed_class(FList_class output))

names2() . set("!" getter)

dv2loop <- fun[]:
  repeat:
    print("debugger_v2")
    printeol()
    #return(None())
    debuggerv2()
    run(names2() . get("dv2loop_file"))

# Uncomment to (re)generate FlpcForth for extra syntax
#add_triple_quote()
#add_resizable_syntax()
#add_list_comp_syntax()
#add_getter_syntax()
#add_f_string_syntax()

run_file("gen/triple_quote.f")
to_forth_conv_hash . set("TRIPLE_QUOTE" to_forth_conv.TRIPLE_QUOTE)
run_file("gen/resizable_syntax.f")
to_forth_conv_hash . set("make_resizable" to_forth_conv.make_resizable)
run_file("gen/list_comp_syntax.f")
to_forth_conv_hash . set("list_comp_var" to_forth_conv.list_comp_var)
run_file("gen/getter_syntax.f")
to_forth_conv_hash . set("opt_simple_for" to_forth_conv.opt_simple_for)
to_forth_conv_hash . set("fmt" to_forth_conv.fmt)
run_file("gen/f_string.f")
to_forth_conv_hash . set("assign_op" to_forth_conv.assign_op)

#dv2loop_file <- "lib/stage7b.flpc"
#dv2loop_file <- "gen/grammar_temp.flpc"
#dv2loop_file <- "lib/stage7c2.flpc"
#dv2loop_file <- "lib/compiled_parser.flpc"
#dv2loop_file <- "test/opt_simple_for.flpc"
dv2loop_file <- "test/formatting.flpc"
dv2loop()
