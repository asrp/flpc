
# Nothing else from the compiled file will run if we run this!
# So it has to be the last thing in the compiled file.
# What's a good way to do nesting? Or should we go the
# continuation passing route?
# Also need to exit the function that called run.
compile_temp <- fun[filename temp_filename]:
  init_g(temp_filename)
  g . set("autogen_name" "tempgen")
  compile_file(filename)
  file.close(g . get("file"))

run_file <- inline[]: # filename
  current_input_file()
  shuffle("4123")
  switch_input_file() # filename
  continue_from_file() # implicit means continue from previous file

run_temp <- fun[filename temp_filename]:
  compile_temp(temp_filename filename)
  run_file(temp_filename)

run <- fun[filename]:
  compile_temp(`filename "gen/temp.f")
  run_file("gen/temp.f")

outf <- 1 # Dummy value

write_file <- fun[str filename]:
  file.open_at("w" filename outf)
  set_output(outf)
  print("#_Generated")
  printeol()
  printraw(str)
  printeol()
  set_output(None())
  file.close(outf)

append_file <- fun[str filename]:
  file.open_at("a" filename outf)
  set_output(outf)
  printraw(str)
  printeol()
  set_output(None())
  file.close(outf)

eval_one <- fun[]:
  print(">>_")
  source = stdin.next_line()
  write_file(source "gen/eval.flpc")
  run("gen/eval.flpc")

eval_repl <- fun[]:
  repeat:
    print(">>_")
    source = stdin.next_line()
    if source == None() || string_equal(source "q"):
      return()
    write_file(`source "gen/eval.flpc")
    run("gen/eval.flpc")

debug_separator <- "debug_separator" # make_resizable(0)

print_until_sep <- inline[]:
  cond = not(pick1() == debug_separator)
  repeat_if:
    drop1(`cond)
    tprint()
    printeol()
    cond = not(pick1() == debug_separator)
  drop1() # debug_separator

debug_g <- hashtable(20)

help <- fun[func]:
  print_frame(True 3 func)

look <- fun[]:
  print_frame(False debug_g . get("context") call_stack.len() - (debug_g . get("height")))

run_and_print <- inline[]: # filename
  current_input_file()
  debug_separator
  shuffle("51234")
  switch_input_file()
  # Problem: When we assign values, we don't want them to be cleared
  # I guess no local vars then? Or have some syntax for "keep"
  print("-----")
  printeol()
  # debugger()
  print_until_sep()
  continue_from_file()

debuggerv2 <- inline[]:
  debug_g . set("height" 8)
  debug_g . set("context" 2)
  debug_g . set("multiline" False)
  repeat:
    print(">>_")
    source = stdin.next_line()
    if source == None() || string_equal(source "q"):
      # Doesn't work in a multi-if because count is wrong!
      # Ugly hack around messed up separators
      newfunc1()
      return()
    if string_equal(source "u"):
      drop1()
      debug_g . set("height" debug_g . get("height") + 1)
      look()
    elif string_equal(source "d"):
      drop1()
      debug_g . set("height" debug_g . get("height") - 1)
      look()
    elif string_equal(source "l"):
      drop1()
      debug_g . set("context" debug_g . get("context") + 1)
      look()
    elif string_equal(source "L"):
      drop1()
      debug_g . set("context" debug_g . get("context") - 1)
      look()
    elif string_equal(source "m"):
      debug_g . set("multiline" not(debug_g . get("multiline")))
      write_file("#Empty" "gen/eval.flpc")
    elif string_equal(source "f"):
      run_and_print("gen/temprun.f")
    elif debug_g . get("multiline"):
      if string_equal(source "r"):
        debug_separator
        compile_temp("gen/eval.flpc" "gen/temp.f")
        run_and_print("gen/temp.f")
        debug_g . set("multiline" not(debug_g . get("multiline")))
      else:
        append_file(source "gen/eval.flpc")
    elif str_len(source) == 0:
      # Empty line, do nothing
      drop1()
    elif True:
      # Need an exec and var assign
      # Could just use files/run for now.
      write_file(`source "gen/eval.flpc")
      compile_temp("gen/eval.flpc" "gen/temp.f")
      run_and_print("gen/temp.f")

error_handler_set(debuggerv2)

grammar_eval_file <- fun[filename]:
  bootg . set(0 "flpcg")
  #print(">>_")
  #source = stdin.next_line()
  #write_file(`source "gen/temp.grammar")
  write_parsed_funcs(bootg filename "gen/grammar_temp.flpc")
  run("gen/grammar_temp.flpc")

to_forth_conv.TRIPLE_QUOTE <- fun[root]:
  return(changed_class(FList_class make_resizable(forthe("FCall" "'''") forthe("FStr" root . get(0)) forthe("FCall" "'''") 3)))

add_triple_quote <- fun[]:
  grammar_eval_file("grammar/triple_quote.grammar")
  to_forth_conv_hash . set("TRIPLE_QUOTE" to_forth_conv.TRIPLE_QUOTE)

dv2loop <- fun[]:
  repeat:
    print("debugger_v2")
    printeol()
    debuggerv2()
    run("lib/stage7b.flpc")

# Uncomment to (re)generate gen/triple_quote.f
# add_triple_quote()
run_file("gen/triple_quote.f")
to_forth_conv_hash . set("TRIPLE_QUOTE" to_forth_conv.TRIPLE_QUOTE)
dv2loop()
