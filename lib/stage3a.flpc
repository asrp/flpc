
load("stage2.pkl")

to_flpc2 <- fun[root]:
  error("Dummy function should not be called")

to_flpc2 <- fun[root]:
    # print(root . type)
    if not(is_instance(root node_class)):
        printrepr(root)
        return_no_value()
    name = root . name
    if string_equal(name "quantifier"):
        return_no_value(to_flpc2(root . get(0)))
    if string_equal(name "inline"):
        return_no_value(to_flpc2(root . get(0)))
    if (string_equal(name "exactly") || string_equal(name "token")) && is_instance(root . get(0) node_class):
        if not(string_equal(root . get(0) . name "escaped_char")):
            tprint(root . get(0))
            error("Unexpected child of exactly. Was expecting a escaped chart.")
        # printrepr(to_flpc2(root . get(0) . get(0)))
        return_no_value(to_flpc2(node(root . name root . get(0) . get(0))))
    if string_equal(name "rule"):
        printraw(parseg . get("prefix"))
        print(".rules.")
        printraw(root . get(0) . get(0))
        print(" <- fun[]:\n    return(")
        to_flpc2(root . get(3))
        print(")")
        return_no_value()

    if string_equal(name "output"):
        print("out")
    else:
        printraw(name)
    print("(")
    if string_equal(name "and"):
        print("[")
    if string_equal(name "or"):
        print("[")
    l = root . len
    i = l
    repeat_if:
        child = root . get(l - i)
        bracket = 0
        if not(is_instance(child node_class)):
            bracket = `bracket + 1
        else:
            if string_equal(child . name "quantifier"):
                bracket = `bracket + 1
            if string_equal(child . name "inline"):
                bracket = `bracket + 1
        if not(bracket):
            print("[")
        bracket child = s21()
        to_flpc2(`child)
        if not(`bracket):
            print("]")
        i = `i - 1
        if i > 0:
            print(" ")
    if string_equal(name "and"):
        print("]")
    if string_equal(name "or"):
        print("]")
    print(")")

print_grammar_funcs <- fun[root]:
    l = root . len
    i = l
    repeat_if:
        # Should exclude letter and digits
        to_flpc2(root . get(l - i))
        printeol()
        printeol()
        i = `i - 1

print_ruleset <- fun[ruleset]:
    printraw(ruleset)
    print("(")
    printraw(parseg . get("prefix"))
    print(".rules)")
    printeol()

# Need to shorten this once we get more syntax.
# Or maybe with nested functions, or escape chars.
print_grammar_obj <- fun[]:
    prefix = parseg . get("prefix")
    printraw(prefix)
    print(".base <- resizable(0)")
    printeol()
    l = parseg . get("base_rules") . len
    i = l
    repeat_if:
        printraw(prefix)
        print('.base . append("')
        printraw(parseg . get("base_rules") . get(l - i))
        print('")')
        printeol()
        i = `i - 1
    printraw(prefix)
    print(" <- resizable(0)")
    printeol()

    printraw(prefix)
    print(' . append("')
    printraw(prefix)
    print('")')
    printeol()

    printraw(prefix)
    print(' . append(')
    printraw(prefix)
    print('.rules)')
    printeol()

    printraw(prefix)
    print(' . append(')
    printraw(prefix)
    print('.flagged)')
    printeol()

    printraw(prefix)
    print(' . append(')
    printraw(prefix)
    print('.base)')
    printeol()

print_child_setter <- fun[child]:
        name = child . get(0) . get(0)
        print('hashtable.set("')
        printraw(name)
        print('" ')
        printraw(parseg . get("prefix"))
        print(".rules.")
        printraw(name)
        print(' ')
        printraw(parseg . get("prefix"))
        print('.rules)')
        printeol()
        if child . get(1) . len > 0:
            printraw(parseg . get("prefix"))
            print('.flagged . append("')
            printraw(name)
            print('")')
            printeol()

print_grammar_setters <- fun[root]:
    l = root . len
    printraw(parseg . get("prefix"))
    print('.rules <- hashtable(')
    print(int_to_str(l + l + l + l))
    print(')')
    printeol()
    printraw(parseg . get("prefix"))
    print('.flagged <- resizable(0)')
    printeol()
    i = l
    repeat_if:
        print_child_setter(root . get(l - i))
        i = `i - 1

    l = parseg . get("base_rules") . len
    i = l
    repeat_if:
        print_ruleset(parseg . get("base_rules") . get(l - i))
        i = `i - 1

print_grammar_all <- fun[root]:
    print_grammar_funcs(root)
    print_grammar_setters(`root)
    print_grammar_obj()

parse_grammar <- fun[grammar_obj input_filename]:
    names2() . set("source" Input(input_filename))
    init_parseg(grammar_obj)
    print(parseg)
    printeol()
    output = apply("grammar")
    return(output)

write_parsed_funcs <- fun[grammar_obj input_filename output_filename]:
    output = parse_grammar(grammar_obj input_filename)
    output . print()
    printeol()
    print("Writing ")
    printraw(output_filename)
    printeol()
    print(output . name)
    printeol()
    outf = file.open("w" output_filename)
    set_output(outf)
    if not(string_equal(output . name "grammar")):
      wrapped = resizable(1)
      wrapped . set(0 output)
    else:
      wrapped = output
    print_grammar_funcs(wrapped)
    l = wrapped . len
    i = l
    repeat_if:
      print_child_setter(wrapped . get(l - i))
      i = `i - 1
    set_output(None())
    file.close(outf)

write_parsed <- fun[grammar_obj input_filename output_filename]:
    output = parse_grammar(grammar_obj input_filename)
    output . print()
    printeol()
    print("Writing ")
    printraw(output_filename)
    printeol()
    outf = file.open("w" output_filename)
    set_output(outf)
    print_grammar_all(output)
    set_output(None())
    file.close(outf)
