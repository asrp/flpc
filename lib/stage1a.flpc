
# Looks more like partial evaluation than closure.
# Evaluates one param.
# closure <- fun[method self]:
#  # push: self push: method
#  return(Pointer(memory.len() - 4))
closure <- inline[]:
  F' pushf: push: memory.append memory.append
     memory.append
     pushf: ] memory.append
     memory.len pushi: 4 - Pointer 'F

# Is running names.get("end_of_func") really that much better?
end_of_func <- names.get("]")
True <- 1
False <- 0
lookup_print <- False

# call(*args func)
attr_colon <- inline[self]:
  # self.attrib(name self self)
  name = next_token2()
  name self = s21()
  # `name `self
  call(self memory.get(self - 1))

# Should be cached
# Can't cache if *not* writing to function!
# Cache should depend on the object. Maybe only cache the last one?
# This is getting complicated...
attr_call_colon <- inline[self]:
  name = next_token2()
  call(call(`name self self memory.get(self - 1)))

nullobj.attrib <- fun[name receiver searcher]:
  error("Lookup_error")

subclass <- fun[attrib parent]:
  memory.append(`parent)
  memory.append(`attrib)
  memory.append(names.get("]"))
  return(Pointer(memory.len() - 1))

nullobj <- subclass(nullobj.attrib None())

instance_attrib <- fun[name receiver searcher]:
  return_if(string_equal(name "parent") memory.get(receiver - 2))
  parent = searcher . parent
  if parent == nullobj:
    error("Lookup_error")
  # Abusing param resolution.
  parent_copy = pick1(name receiver parent)
  return(call(memory.get(`parent_copy - 1)))

minobj <- class[]:
  str <- fun[self]:
    # return("minobj_at_" + memory.str(self))
    return("Boot_object_at_")

  instance <- fun[parent]:
    return(subclass(instance_attrib parent))

  attrib <- fun[name receiver searcher]:
    error("Dummy_function_should_not_be_called")

  # Closures have to be created manually
  attrib <- fun[name receiver searcher]:
    if lookup_print:
      print("Boot_looking_up_")
      print(name)
      printeol()
    return_if(string_equal(name "attrib_raw") memory.get(receiver - 1))
    return_if(string_equal(name "attrib")   minobj.attrib)
    return_if(string_equal(name "instance") minobj.instance)
    return_if(string_equal(name "subclass") subclass)
    return_if(string_equal(name "str")      minobj.str)
    return_if(string_equal(name "type")     "minobj")
    return(instance_attrib(name receiver searcher))

boot_obj <- subclass(minobj.attrib nullobj)

memory.extend <- fun[i]:
  repeat_if:
    memory.append(0)
    i = `i - 1

tprint <- fun[value]:
  if is_basic(value):
    print(value)
  else:
    if value < obj_boundary:
      print(value)
    else:
      # Should just print the pointer if "value . print" isn't defined...
      value . print()

boot_array <- class[]:
  # Parent at -2, attrib at -1
  instance <- fun[length self]:
    new_obj = minobj.instance(boot_obj)
    memory.set(self new_obj - 2)
    memory.set(length new_obj)
    memory.extend(length)
    memory.append(names.get("]"))
    return(new_obj)

  in_range <- fun[key self]:
    if key < 0:
      error("Index_out_of_range")
    if not(key < memory.get(self)):
      error("Index_out_of_range")

  get <- fun[key self]:
    boot_array.in_range(key self)
    return(memory.get(self + key + 1))

  set <- fun[key value self]:
    boot_array.in_range(key self)
    memory.set(value self + key + 1)

  print <- fun[self]:
    print("{_")
    l = memory.get(self)
    i = l
    repeat_if:
      tprint(boot_array.get(l - i self))
      printspace()
      i = `i - 1
    print("}")
    # printeol()

  string_index <- fun[value self]:
    i = memory.get(self)
    repeat_if:
      i = `i - 1
      if string_equal(value boot_array.get(i self)):
        return(`i)
    return(None())

  hash_index <- fun[key i self]:
    self i = s21()
    repeat:
      i = `i - 1
      # Need default value here, which is probably 0?
      if(boot_array.get(i self) == 0):
        return(None())
      if string_equal(key boot_array.get(i self)):
        return(`i)
      if i == 0:
        drop1()
        # self . len()
        i = memory.get(self)

  none_index <- fun[i self]:
    self i = s21()
    repeat:
      i = `i - 1
      # Need default value here, which is probably 0?
      if(boot_array.get(i self) == 0):
        return(`i)
      if i == 0:
        drop1()
        # self . len()
        i = memory.get(self)

  copy_to <- fun[other self]:
    i = memory.get(self)
    repeat_if:
      i = `i - 1
      boot_array.set(i boot_array.get(i self) other)

  attrib <- fun[name receiver searcher]:
    if lookup_print:
      print("Array_looking_up_")
      print(name)
      printeol()
    return_if(string_equal(name "get")      boot_array.get)
    return_if(string_equal(name "set")      boot_array.set)
    return_if(string_equal(name "in_range") boot_array.in_range)
    return_if(string_equal(name "instance") boot_array.instance)
    return_if(string_equal(name "print")    boot_array.print)
    return_if(string_equal(name "string_index") boot_array.string_index)
    return_if(string_equal(name "hash_index") boot_array.hash_index)
    return_if(string_equal(name "none_index") boot_array.none_index)
    return_if(string_equal(name "copy_to")  boot_array.copy_to)
    return_if(string_equal(name "len")      memory.get(receiver))
    return_if(string_equal(name "type")     "boot_array")
    return(instance_attrib(name receiver searcher))

boot_array_class <- boot_obj . subclass(boot_array.attrib)
boot_array <- closure(boot_array_class . instance boot_array_class)

boot_dict <- class[]:
  instance <- fun[length self]:
    keys = boot_array.instance(length boot_array_class)
    values = boot_array.instance(length boot_array_class)
    new_obj = minobj.instance(boot_obj)
    memory.set(self new_obj - 2)
    memory.set(0 new_obj)
    memory.append(keys)
    memory.append(values)
    memory.append(names.get("]"))
    return(new_obj)

  get <- fun[key self]:
    index = boot_array.string_index(key memory.get(self + 1))
    return_if(index == None() None())
    return(boot_array.get(index memory.get(self + 2)))

  set <- fun[key value self]:
    l = memory.get(self)
    boot_array.set(l key memory.get(self + 1))
    boot_array.set(l value memory.get(self + 2))
    memory.set(memory.get(self) + 1 self)

  increase <- fun[self]:
    memory.set(memory.get(self) + 1 self)

  print <- fun[self]:
    print("{_")
    l = memory.get(self)
    keys = memory.get(self + 1)
    values = memory.get(self + 2)
    i = l
    repeat_if:
      tprint(boot_array.get(l - i keys))
      print(":_")
      tprint(boot_array.get(l - i values))
      print(",_")
      i = `i - 1
    print("}")
    # printeol()

  attrib <- fun[name receiver searcher]:
    if lookup_print:
      print("Dict_looking_up_")
      print(name)
      printeol()
    return_if(string_equal(name "get")      boot_dict.get)
    return_if(string_equal(name "set")      boot_dict.set)
    return_if(string_equal(name "instance") boot_dict.instance)
    return_if(string_equal(name "print")    boot_dict.print)
    return_if(string_equal(name "increase") boot_dict.increase)
    return_if(string_equal(name "len")      memory.get(receiver))
    return_if(string_equal(name "keys")     memory.get(receiver + 1))
    return_if(string_equal(name "values")   memory.get(receiver + 2))
    return_if(string_equal(name "type")     "boot_dict")
    return(instance_attrib(name receiver searcher))

boot_dict_class <- boot_obj . subclass(boot_dict.attrib)
boot_dict <- closure(boot_dict_class . instance boot_dict_class)

is_instance <- fun[other class]:
  if is_basic(other):
    return(False)
  # self.parent == class
  # class doesn't need to be duplicated here!
  return(`class == memory.get(other - 2))

obj_boundary <- Pointer(memory.len())