
F' [ input.next_token functions.add ] input.next_token bind: functions.add 'F

# Should overwrite position too!
rebind_colon <- fun[func]:
  location = names.get(input.next_token())
  memory.set(location + 1 names.get("]"))
  # Need to invert check order when writing forth...
  memory.set(s21()) #`location `func

pushn_colon <- fun[]:
  return(input.next_token())

ps <- fast_fun[]:
  print_state()

# Need to not drop other values upon return. Should be a local_fun?
# but local_fun still drops (only it does so in the outer function).
# I guess a forth debugger, it doesn't make much sense in the current
# model. So maybe dropping isn't too bad.
debugger_inner <- fun[]:
  repeat:
    print("(dbg) ")
    name = stdin.next_token()
    # In all cases, should also remove name from stack
    if string_equal(name "s"):
      return(None())
    if string_equal(name "n"):
      return(call_stack.len() - 4)
    if string_equal(name "r"):
      return(call_stack.len() - 5)
    if string_equal(name "c"):
      return(0)
    if string_equal(name "i"):
      # Should drop name but can't due to future string_equal tests!
      # Need continue or elif. Have to manually drop1 for the moment...
      print_state()
    if string_equal(name "l"):
      # TODO
      print_state()
    if not(string_equal(name "i")):
      print("Running ")
      print(name)
      # Needs a clean stack before running!
      call(names.get(`name))

debugger <- fun[]:
  print_state()
  debugger_waitlen_set(debugger_inner())

multi-if <- local_fun[i]:
  repeat_if:
    i = `i - 1
    i block cond = shuffle("231")
    if call(`cond):
      block i = s21()
      repeat_if:
        # Drop next pair of cond and block
        block i = shuffle("125")
        i = `i - 1
      call(`block)
      # Exit repeat_if
      i = 0
    else:
      drop1(`block)

error_handler_set(debugger)