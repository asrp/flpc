
lazy_and <- local_fun[cond2_thunk cond1]:
  if `cond1:
    cond = call(`cond2_thunk)
  else:
    drop1(`cond2_thunk)
    cond = False

debugger2 <- fast_fun[]:
  drop1(1)
  #print("debug")
  #printeol()

dprint <- fun[title value]:
  print(title)
  tprint(value)
  printeol()

# Actually a local_fun but we're re-ordering the params right away anyways
simple_for <- fast_fun[end start block]:
  block end index = shuffle("231")
  cond = index < end
  repeat_if:
    drop1(`cond)
    call(block)
    # block needs to include a shuffl back to normal
    index = `index + 1
    cond = index < end
  drop1(`index)
  drop1(`end)
  drop1(`block)

# Use memory location as Singleton
memory.append(None())
Done <- Pointer(memory.len() - 1)

make_resizable <- fast_fun[num]:
  new_resizable = resizable(0)
  new_resizable elem = s21()
  not(pick1() == Done)
  repeat_if:
    drop1() # Condition
    new_resizable . append(`elem)
    new_resizable elem = s21()
    not(pick1() == Done)
  shuffle("23") # return(new_resizable) and drop elem = Done

make_resizable_len <- fast_fun[num]:
  new_resizable = resizable(0)
  new_resizable num = s21()
  simple_for(`num 0 fast_fun[index]:
    new_resizable block end index elem = shuffle("51234")
    new_resizable . append(`elem))
  shuffle("12") # return(new_resizable)

str_cat <- fast_fun[]:
  # make_resizable(*args)
  arr = make_resizable()
  joined = str_join(arr . array + 1 arr . len)
  # return joined
  shuffle("13")

for_in <- local_fun[iterable block2]:
  simple_for(iterable . len 0 fast_fun[index]:
    elem = iterable . get(index)
    call(block2))
  drop1(`block2)
  drop1(`iterable)

list_comp <- local_fun[block3 iterable]:
  list_comp_out = resizable(0)
  for_in(iterable fast_fun[elem]:
    list_comp_out . append(call(block3))
    drop1(`elem))
  # Leaving list_comp_out unnamed so the calling function can name this
  shuffle("14")

list_comp_var <- local_fun[block3 var_name iterable]:
  list_comp_out = resizable(0)
  for_in(iterable fast_fun[elem]:
    assign2(elem var_name)
    list_comp_out . append(call(block3))
    drop1() # var_name
    drop1(`elem))
  # Leaving list_comp_out unnamed so the calling function can name this
  shuffle("15")

list_comp_cond <- local_fun[block3 iterable condition]:
  list_comp_out = resizable(0)
  for_in(iterable fast_fun[elem]:
    if call(condition):
      list_comp_out . append(call(block3))
    drop1(`elem))
  # Leaving list_comp_out unnamed so the calling function can name this
  shuffle("14")

flist <- class[]:
  foo <- fun[bar]:
    return(1)

  attrib <- fun[name receiver searcher]:
    if lookup_print:
      print("FList looking up ")
      print(name)
      printeol()
    return_if(string_equal(name "pos")      0)
    return(instance_attrib(name receiver searcher))

FList_class <- boot_obj . subclass(resizable.attrib)
FList <- closure(FList_class . instance FList_class)

# Confused. This works for lookups but need to not have the -1 for is_instance to work.
change_class <- fun[obj new_class]:
  memory.set(obj - 2 new_class)

extend <- fun[in_list out_list]:
  for_in(in_list fast_fun[elem]:
    out_list . append(`elem))

flatten <- fun[in_list class]:
  out_list = resizable(0)
  for_in(in_list fast_fun[elem]:
    if is_instance(elem class):
      extend(`elem out_list)
    else:
      out_list . append(`elem))
  return(`out_list)

# Wrapper for a single Forth call
forthe <- class[]:
  print <- fun[self]:
    tprint(memory.get(self + 1))

  attrib <- fun[name receiver searcher]:
    if lookup_print:
      print("Forthe looking up ")
      print(name)
      printeol()
    return_if(string_equal(name "get")      node.get)
    return_if(string_equal(name "instance") node.instance)
    return_if(string_equal(name "print")    forthe.print)
    return_if(string_equal(name "len")      node.len(receiver))
    return_if(string_equal(name "name")     memory.get(receiver))
    return_if(string_equal(name "value")    memory.get(receiver + 1))
    return_if(string_equal(name "type")     "forthe")
    return(instance_attrib(name receiver searcher))

forthe_class <- boot_obj . subclass(forthe.attrib)
forthe <- closure(forthe_class . instance forthe_class)

# Hack where name == "_" means not yet set!
FQuote <- class[]:
  set_name <- fun[new_name self]:
    memory.set(s21()) # self new_name

  attrib <- fun[name receiver searcher]:
    if lookup_print:
      print("FQuote looking up ")
      print(name)
      printeol()
    return_if(string_equal(name "get")      node.get)
    return_if(string_equal(name "instance") node.instance)
    return_if(string_equal(name "print")    node.print)
    return_if(string_equal(name "set_name") FQuote.set_name)
    return_if(string_equal(name "len")      node.len(receiver))
    return_if(string_equal(name "name")     memory.get(receiver))
    return_if(string_equal(name "value")    memory.get(receiver + 1))
    return_if(string_equal(name "type")     "FQuote")
    return(instance_attrib(name receiver searcher))

FQuote_class <- boot_obj . subclass(FQuote.attrib)
FQuote <- closure(FQuote_class . instance FQuote_class)

FQuote.hash <- convert_attr(FQuote_class)
FQuote.attrib <- fun[name receiver searcher]:
  hash_header()
  call(hashtable.get(name FQuote.hash))

to_flist <- fun[array]:
  change_class(array FList_class)
  return(`array)

array.clear <- fun[self]:
  i = memory.get(self)
  repeat_if:
    memory.set(self + i + 1 0)
    i = `i - 1